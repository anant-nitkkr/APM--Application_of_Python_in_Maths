# -*- coding: utf-8 -*-
"""APM-SS-01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xWo2BGyzqmFLrqh2RRj9dNz1lOqTUmuf

# Python in Mathematics - Colab Notebook

## Section 1: Introduction to Python

### Introduction to Python

Python is a versatile, high-level programming language known for its simplicity and readability. Developed by Guido van Rossum in 1991, Python emphasizes code readability and allows developers to express concepts in fewer lines of code compared to other programming languages.

---

#### **Key Features of Python**
- **Easy to Learn and Use**: Python's syntax is simple and intuitive, making it an ideal choice for beginners and professionals alike.
- **Open-Source**: Python is free to use and distribute, with a large, supportive community contributing to its ecosystem.
- **Cross-Platform**: Python works seamlessly across Windows, macOS, and Linux.
- **Rich Libraries**: Python offers powerful libraries for tasks like data analysis, scientific computing, and machine learning.
- **Dynamic Typing**: No need for explicit variable declarations; Python infers types automatically.

---

#### **Why Learn Python?**
- üåü **Beginner-Friendly**: Python's straightforward syntax is perfect for learning programming basics.  
- ‚öôÔ∏è **Versatile Applications**: It powers a wide range of fields, including web development, AI, data science, and automation.  
- üß† **Problem-Solving Power**: Use Python to solve real-world problems, from mathematics to software engineering.  
- üìö **Extensive Libraries**: With tools like NumPy and SymPy, Python simplifies complex mathematical computations.  
- üé® **Data Visualization**: Libraries like Matplotlib and Seaborn enable visually appealing data representation.  
- üåê **Career Opportunities**: Python's demand in tech industries makes it a valuable skill for job seekers.  

---

#### **Applications in Mathematics**
Python is a popular choice for mathematicians and data scientists because it can:
- Solve algebraic and numerical equations.
- Perform symbolic computation with libraries like **SymPy**.
- Handle numerical matrices and arrays efficiently using **NumPy**.
- Visualize mathematical models and data with **Matplotlib**.
- Simplify advanced operations like calculus, differential equations, and optimizations.

Python's versatility makes it a critical tool for students, researchers, and professionals across disciplines.
"""

# Python basics
print("Welcome to Python in Mathematics")

"""### commenting"""

# this is a one line comment
'single line comment'
"""this is a multi-line
comment(triple quote)"""

"""### data types


"""

# Examples
a = 10       # int
b = 3.14     # float
c = 2 + 3j   # complex
text = "Hello, Python!"  # str
my_list = [1, 2, 3, 4]   # list
my_tuple = (5, 6, 7, 8)  # tuple

print(type(a))  # <class 'int'>
print(type(b))  # <class 'float'>
print(type(c))  # <class 'complex'>
print(type(text))   # <class 'str'>
print(type(my_list)) # <class 'list'>
print(type(my_tuple)) # <class 'tuple'>

"""### Numbers"""

x = 1    # int
y = 2.8  # float
z = 1j   # complex

print(type(x))
print(type(y))
print(type(z))

"""### Booleans"""

print(10 > 9)

print(10 == 9)

print(10 < 9)

a = 2025
b = 2024

if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")

"""### Operator"""

# Variables and simple operations
a = 10
b = 5
print("Sum:", a + b)
print("Product:", a * b)

print(a % b) # modulus

print(a // b)

#the floor division // rounds the result down to the nearest whole number

"""### Lists"""

fruits = ["apple", "banana", "cherry"] # make a list
print(fruits)

print(fruits[1]) # access elements in a list: index starting from 0

fruits.append("orange")
print(fruits)

fruits.remove("banana")
print(fruits)

for x in fruits:
  print(x)

fruits.sort()
print(fruits)

"""### set"""

thisset = {"apple", "banana", "cherry"} # no element is repeated
print(thisset)

for x in thisset: # access set element
  print(x)

thisset.add("orange") #add element in set
print(thisset)

thisset.remove("apple")

print(thisset)

"""### dictionary"""

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

print(thisdict)

x = thisdict["model"] # access element

"""## Section 2: Looping in Python"""

# For loop example
for i in range(1, 6):
    print(f"Square of {i}: {i**2}")

# While loop example
n = 5
while n > 0:
    print(f"Countdown: {n}")
    n -= 1

# List comprehension example
squares = [x**2 for x in range(1, 6)]
print("Squares using list comprehension:", squares)

"""### calling a function"""

def my_function():
  print("Hello I am a function")

my_function()

"""### arguments"""

def my_function(fname):
  print(fname + " NIT Kurukshetra")

my_function("Department")
my_function("ANANT")

"""## Section 3: Python Libraries Overview"""

# Importing essential libraries
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

print("Libraries imported successfully!")

"""## Section 4: NumPy"""

# Array operations
arr = np.array([1, 2, 3, 4, 5])
print("Original Array:", arr)
print("Array Squared:", arr**2)

# Matrix operations
matrix1 = np.array([[1, 2], [3, 4]])
matrix2 = np.array([[5, 6], [7, 8]])
print("Matrix Multiplication:", np.dot(matrix1, matrix2))

# Calculus example
x = np.linspace(0, 10, 100)
y = np.sin(x)
print("Sine values:", y[:5])  # Displaying first 5 values

# Trigonometric functions
angles = np.array([0, np.pi/2, np.pi])
print("Sin values:", np.sin(angles))
print("Cos values:", np.cos(angles))

"""## Section 5: SymPy"""

# Symbols and algebraic operations
x = sp.symbols('x')
expression = x**2 + 3*x + 2
print("Expression:", expression)
print("Derivative:", sp.diff(expression, x))
print("Integral:", sp.integrate(expression, x))

# Solving equations
eq = sp.Eq(x**2 + 3*x + 2, 0)
solutions = sp.solve(eq, x)
print("Solutions:", solutions)

# Simplifying expressions
expr = (x**2 + 2*x + 1) / (x + 1)
simplified = sp.simplify(expr)
print("Simplified Expression:", simplified)

# Series expansion
taylor_series = sp.series(sp.sin(x), x, 0, 5)
print("Taylor Series:", taylor_series)

# Solving differential equations
f = sp.Function('f')
ode = sp.Eq(f(x).diff(x, x) + f(x), 0)
solution = sp.dsolve(ode)
print("ODE Solution:", solution)

"""## Section 6: Matplotlib"""

# Line plot
x = np.linspace(0, 10, 100)
y = x**2
plt.plot(x, y, label="y = x^2")
plt.title("Line Plot")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.legend()
plt.show()

# Bar chart
categories = ['A', 'B', 'C', 'D']
values = [10, 15, 7, 12]
plt.bar(categories, values, color='purple')
plt.title("Bar Chart Example")
plt.show()

# Scatter plot
x = [1, 2, 3, 4, 5]
y = [5, 7, 6, 8, 7]
plt.scatter(x, y, color='orange')
plt.title("Scatter Plot Example")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.show()

# Subplots
fig, ax = plt.subplots(2, 1)
x = np.linspace(0, 10, 100)
ax[0].plot(x, np.sin(x), color='blue')
ax[0].set_title("Sine Wave")
ax[1].plot(x, np.cos(x), color='green')
ax[1].set_title("Cosine Wave")
plt.tight_layout()
plt.show()

"""## Thank You"""

print("Thank you for exploring Python in Mathematics!")